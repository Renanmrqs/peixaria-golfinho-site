   // Este √© o conte√∫do para o seu arquivo script.js

// 2Ô∏è‚É£ Inicializa EmailJS com sua Public Key - ESTA LINHA VAI PARA O SEU script.js
emailjs.init('ZhtqLCwT209exfxYP'); 

// --- 1. MELHORIA NO FEEDBACK DO FORMUL√ÅRIO DE CONTATO ---
document.getElementById('emailForm').addEventListener('submit', function(e) {
    e.preventDefault(); // Impede o recarregamento da p√°gina

    const feedbackDiv = document.getElementById('feedback-message');
    const submitButton = e.target.querySelector('button[type="submit"]');

    // --- Valida√ß√µes Frontend ---
    const nameInput = e.target.querySelector('input[name="user_name"]');
    const emailInput = e.target.querySelector('input[name="user_email"]');
    const messageInput = e.target.querySelector('textarea[name="user_message"]');

    // Valida√ß√£o de campos vazios
    if (!nameInput.value.trim() || !emailInput.value.trim() || !messageInput.value.trim()) {
        feedbackDiv.textContent = 'Por favor, preencha todos os campos.';
        feedbackDiv.style.color = 'orange';
        return; // Para a execu√ß√£o da fun√ß√£o se houver campos vazios
    }

    // Valida√ß√£o de formato de e-mail (b√°sica)
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(emailInput.value)) {
        feedbackDiv.textContent = 'Por favor, insira um e-mail v√°lido.';
        feedbackDiv.style.color = 'orange';
        return; // Para a execu√ß√£o da fun√ß√£o se o e-mail for inv√°lido
    }

    // Se as valida√ß√µes passarem, exibe mensagem de envio e desabilita o bot√£o
    feedbackDiv.textContent = 'Enviando...';
    feedbackDiv.style.color = '#1E3A8A'; // Cor azul para "enviando"
    submitButton.disabled = true; // Desabilita o bot√£o para evitar m√∫ltiplos cliques

    // Envio do e-mail via EmailJS
    emailjs.sendForm(
        'service_qclqx6x',    // ID do servi√ßo
        'template_gboq5qe',   // ID do template
        e.target              // O formul√°rio em si
    ).then(
        () => {
            feedbackDiv.textContent = 'E-mail enviado com sucesso! üéâ';
            feedbackDiv.style.color = 'green';
            e.target.reset(); // Limpa o formul√°rio ap√≥s o envio bem-sucedido
        },
        (error) => {
            feedbackDiv.textContent = 'Erro ao enviar e-mail. Tente novamente. üòû';
            feedbackDiv.style.color = 'red';
            console.error('Erro no EmailJS:', error); // Para depura√ß√£o no console do navegador
        }
    ).finally(() => {
        submitButton.disabled = false; // Habilita o bot√£o de volta, seja sucesso ou erro
    });
});

// --- 2. INTERATIVIDADE NOS BOT√ïES "COMPRAR" ---
document.querySelectorAll('.btn-comprar').forEach(button => {
    button.addEventListener('click', function() {
        const productName = this.dataset.nomeProduto; // Pega o nome do data-attribute
        const productPrice = parseFloat(this.dataset.precoProduto); // Pega o pre√ßo e converte para n√∫mero

        // Exemplo simples: um alerta. Em um app real, aqui adicionaria ao carrinho.
        alert(`"${productName}" adicionado ao seu carrinho por R$ ${productPrice.toFixed(2)}/kg!`);
    });
});

// --- 3. BOT√ÉO "PE√áA AGORA" NO BANNER ---
document.querySelector('.btn-primario').addEventListener('click', function() {
    // Faz a p√°gina rolar suavemente para a se√ß√£o de produtos
    document.getElementById('produtos').scrollIntoView({ behavior: 'smooth' });
});